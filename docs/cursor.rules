# Cursor IDE Kuralları ve Ayarları

## Editör Ayarları
```json
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "editor.rulers": [80, 100],
  "editor.wordWrap": "on",
  "files.trimTrailingWhitespace": true,
  "files.insertFinalNewline": true
}
```

## ESLint Ayarları
```json
{
  "extends": [
    "next/core-web-vitals",
    "prettier"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "warn",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn"
  }
}
```

## Prettier Ayarları
```json
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "bracketSpacing": true,
  "arrowParens": "always"
}
```

## TypeScript Ayarları
```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
```

## Git Ayarları
```gitignore
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
```

## VS Code Eklentileri
- ESLint
- Prettier
- Tailwind CSS IntelliSense
- TypeScript and JavaScript Language Features
- Git Lens
- Error Lens
- Auto Close Tag
- Auto Rename Tag
- Path Intellisense
- Import Cost

## Kod Yazım Kuralları
1. Komponent isimleri PascalCase olmalıdır
2. Dosya isimleri kebab-case olmalıdır
3. Değişken ve fonksiyon isimleri camelCase olmalıdır
4. Tip tanımlamaları interface ile yapılmalıdır
5. Props interface'leri ComponentNameProps şeklinde isimlendirilmelidir
6. Styled components için StyledComponentName convention'ı kullanılmalıdır
7. Utility fonksiyonları src/lib altında toplanmalıdır
8. Komponentler atomic design prensibine göre organize edilmelidir
9. Her komponent kendi klasöründe bulunmalıdır
10. Test dosyaları .test.tsx uzantılı olmalıdır

## Commit Mesaj Formatı
- feat: Yeni özellik
- fix: Hata düzeltmesi
- docs: Dokümantasyon değişiklikleri
- style: Kod formatı değişiklikleri
- refactor: Kod refactoring
- test: Test değişiklikleri
- chore: Yapılandırma değişiklikleri

## Branch İsimlendirme
- feature/feature-name
- bugfix/bug-name
- hotfix/issue-name
- release/version-number
- docs/documentation-update 